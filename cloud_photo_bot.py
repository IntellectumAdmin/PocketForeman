# -*- coding: utf-8 -*-
"""
Pocket Foreman: Cloudinary -> Notion
- –ê–≤—Ç–æ /sync –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—á—Ç–µ–Ω–∏–µ structure.txt, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ Cloudinary, –∫—ç—à)
- –ê–≤—Ç–æ-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–Ω–æ–ø–∫–∞ ¬´üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ¬ª –±–µ–∑ /start
- /photo: –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª -> —Ñ–æ—Ç–æ -> (–æ–ø—Ü.) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π -> Cloudinary -> –∑–∞–ø–∏—Å—å –≤ Notion
"""

import os
import io
import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple


from structure_safe_sync import start_safe_sync


from dotenv import load_dotenv
import requests
import cloudinary
import cloudinary.uploader

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ===== –õ–æ–≥–∏ =====

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("pf-bot")
log.setLevel(logging.INFO)

# –ü—Ä–∏–∂–º—ë–º ¬´—à—É–º–Ω—ã–µ¬ª –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)
logging.getLogger("cloudinary").setLevel(logging.WARNING)

# ===== .env =====
load_dotenv()

# === Notion ===
NOTION_TOKEN = os.getenv("NOTION_TOKEN_SCHOOL65", "")
DATABASE_ID  = os.getenv("NOTION_DATABASE_ID_SCHOOL65", "")

# === Cloudinary ===
CLOUD_NAME     = os.getenv("CLOUD_NAME", "")
CLOUD_API_KEY  = os.getenv("CLOUD_API_KEY", "")
CLOUD_API_SECRET = os.getenv("CLOUD_API_SECRET", "")
CLOUD_ROOT     = os.getenv("CLOUD_ROOT", "Project")

# === Telegram ===
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

# === –ö–æ–ª–æ–Ω–∫–∏ –≤ Notion ===
PROP_SECTION = os.getenv("PROP_SECTION", "–†–∞–∑–¥–µ–ª")
PROP_FILE    = os.getenv("PROP_FILE", "–§–∞–π–ª / –§–æ—Ç–æ")
PROP_URL     = os.getenv("PROP_URL", "–°—Å—ã–ª–∫–∞ OneDrive")  # —Å—é–¥–∞ –∫–ª–∞–¥—ë–º —Å—Å—ã–ª–∫—É Cloudinary
PROP_DATE    = os.getenv("PROP_DATE", "–î–∞—Ç–∞")
PROP_COMMENT = os.getenv("PROP_COMMENT", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

# === –ö—ç—à —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===
STRUCTURE_CACHE = "structure_cache.json"

# ==== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) ====
BTN_ADD_PHOTO = "üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"

def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[KeyboardButton(BTN_ADD_PHOTO)]], resize_keyboard=True)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
async def ensure_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ù–∏—á–µ–≥–æ ¬´—É–º–Ω–æ–≥–æ¬ª –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

def quick_inline_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="go")]])

# ===== Cloudinary config =====
if not (CLOUD_NAME and CLOUD_API_KEY and CLOUD_API_SECRET):
    raise RuntimeError("–ó–∞–ø–æ–ª–Ω–∏ CLOUD_NAME/CLOUD_API_KEY/CLOUD_API_SECRET –≤ .env")
cloudinary.config(
    cloud_name=CLOUD_NAME,
    api_key=CLOUD_API_KEY,
    api_secret=CLOUD_API_SECRET,
    secure=True,
)

# ===== Notion headers =====
NOTION_HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Notion-Version": "2022-06-28",
    "Content-Type": "application/json",
}

# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ =====
PH1_WAIT_SECTION, PH2_WAIT_PHOTO, PH3_WAIT_COMMENT = range(100, 103)

# ====== –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ======
# –¥–µ–ª–∞–µ–º —Ç—É—Ç –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –º–æ–¥—É–ª—å –±—ã–ª —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º
from structure_sync import sync_structure

try:
    info = sync_structure()
    log.info(f"‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ. –ö–æ—Ä–µ–Ω—å: {info['root']}, —Ä–∞–∑–¥–µ–ª–æ–≤: {len(info['paths'])}")
except Exception as e:
    log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {e}")

# ====== –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤: –¥–µ—Ä–µ–≤–æ –∏–∑ –∫—ç—à–∞ ======
# –§–∞–π–ª structure_cache.json —Å–æ–∑–¥–∞—ë—Ç—Å—è /sync. –§–æ—Ä–º–∞—Ç:
# {"root": "–®–∫–æ–ª–∞_65", "paths": ["–ó–¥–∞–Ω–∏–µ —à–∫–æ–ª—ã/–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è —á–∞—Å—Ç—å/–§–∞—Å–∞–¥—ã", ...]}

from pathlib import Path

STRUCTURE_CACHE_PATH = Path("structure_cache.json")
STRUCT_ROOT = "–®–∫–æ–ª–∞_65"     # –µ—Å–ª–∏ –≤ –∫—ç—à–µ –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π root ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –Ω–∏–∂–µ
STRUCT_INDEX: Dict[str, List[str]] = {}  # parent_path -> [child_name, ...]

def _build_index(paths: List[str]) -> Dict[str, List[str]]:
    """
    –ò–∑ —Å–ø–∏—Å–∫–∞ 'A/B/C' —Å—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å:
      "" -> ["A", ...]
      "A" -> ["B", ...]
      "A/B" -> ["C", ...]
    """
    idx: Dict[str, set] = {}
    for p in paths:
        parts = [s.strip() for s in p.split("/") if s.strip()]
        for i in range(len(parts)):
            parent = "/".join(parts[:i])
            child  = parts[i]
            idx.setdefault(parent, set()).add(child)
    return {k: sorted(list(v)) for k, v in idx.items()}

def structure_load_index():
    global STRUCT_ROOT, STRUCT_INDEX
    if STRUCTURE_CACHE_PATH.exists():
        data  = json.loads(STRUCTURE_CACHE_PATH.read_text(encoding="utf-8"))
        STRUCT_ROOT = data.get("root", STRUCT_ROOT)
        paths = data.get("paths", [])
        STRUCT_INDEX = _build_index(paths)
    else:
        STRUCT_INDEX = {}
    return STRUCT_ROOT, STRUCT_INDEX

def structure_children(parent_path: str) -> List[str]:
    """–î–µ—Ç–∏ —É –¥–∞–Ω–Ω–æ–≥–æ 'parent_path' ('', 'A', 'A/B', ...)"""
    return STRUCT_INDEX.get(parent_path, [])

def format_path_for_notion(path_str: str) -> str:
    """–ü—É—Ç—å 'A/B/C' -> 'A / B / C' (–∫–∞–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ ¬´–†–∞–∑–¥–µ–ª¬ª –≤ Notion)"""
    parts = [s for s in path_str.split("/") if s]
    return " / ".join(parts)

# ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–∏—Ö id –¥–ª—è –ø—É—Ç–µ–π (—á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 64 –±–∞–π—Ç–∞ callback_data) =====
PATH2ID: Dict[str, str] = {}
ID2PATH: Dict[str, str] = {}
ID_SEQ = 1

def _id_for_path(path: str) -> str:
    """–í—ã–¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–π id –¥–ª—è –ø—É—Ç–∏ 'A/B/C' –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ."""
    global ID_SEQ
    if path not in PATH2ID:
        PATH2ID[path] = str(ID_SEQ)
        ID2PATH[str(ID_SEQ)] = path
        ID_SEQ += 1
    return PATH2ID[path]

def _path_by_id(pid: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É id (–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)."""
    return ID2PATH.get(pid, "")

# ===== Notion =====
def _notion_create_row(section: str, file_name: str, url: str, comment: Optional[str]) -> Tuple[bool, str]:
    today_iso = datetime.now().strftime("%Y-%m-%d")
    props: Dict[str, Any] = {
        PROP_SECTION: {"select": {"name": section}},
        PROP_FILE:    {"rich_text": [{"text": {"content": file_name}}]},
        PROP_URL:     {"url": url},
        PROP_DATE:    {"date": {"start": today_iso}},
    }
    if comment:
        props[PROP_COMMENT] = {"rich_text": [{"text": {"content": comment}}]}

    payload = {"parent": {"database_id": DATABASE_ID}, "properties": props}
    r = requests.post("https://api.notion.com/v1/pages", headers=NOTION_HEADERS, json=payload)
    if r.status_code in (200, 201):
        return True, "ok"
    try:
        return False, r.json().get("message", r.text)
    except Exception:
        return False, r.text

# ===== /start (–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) =====
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë∑ –ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ä–º–∞–Ω–Ω—ã–π –ü—Ä–æ—Ä–∞–±.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=main_menu()
    )
    await update.message.reply_text("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=quick_inline_menu())

# ===== –ê–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥ =====
async def on_first_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get("welcomed"):
        return
    context.user_data["welcomed"] = True

    if update.message:
        await update.message.reply_text(
            "üë∑ –ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ä–º–∞–Ω–Ω—ã–π –ü—Ä–æ—Ä–∞–±.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:",
            reply_markup=main_menu()
        )
        await update.message.reply_text("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=quick_inline_menu())

# ===== /sync (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∞–¥–º–∏–Ω–æ–º, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) =====
async def cmd_sync(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã‚Ä¶")
    try:
        info = sync_structure()
        await update.message.reply_text(
            f"‚úì –ì–æ—Ç–æ–≤–æ. –ö–æ—Ä–µ–Ω—å: {info['root']}\n–†–∞–∑–¥–µ–ª–æ–≤: {len(info['paths'])}",
            reply_markup=main_menu()
        )
    except Exception as e:
        await update.message.reply_text(f"‚úó –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ =====
def _kb_for_parent(parent_path: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è parent_path:
      - –¥–æ—á–µ—Ä–Ω–∏–µ –ø–∞–ø–∫–∏ (2 –≤ —Ä—è–¥),
      - ‚¨ÖÔ∏è –ù–∞–∑–∞–¥,
      - ‚úÖ –í—ã–±—Ä–∞—Ç—å –∑–¥–µ—Å—å.
    –í callback_data –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ id.
    """
    children = structure_children(parent_path)
    rows: List[List[InlineKeyboardButton]] = []

    row: List[InlineKeyboardButton] = []
    for name in children:
        full = f"{parent_path}/{name}" if parent_path else name
        pid = _id_for_path(full)
        row.append(InlineKeyboardButton(f"üìÇ {name}", callback_data=f"p|{pid}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)

    ctrl: List[InlineKeyboardButton] = []
    if parent_path:
        parent_parent = "/".join(parent_path.split("/")[:-1])
        bid = _id_for_path(parent_parent)
        ctrl.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"b|{bid}"))
    cid = _id_for_path(parent_path)
    ctrl.append(InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –∑–¥–µ—Å—å", callback_data=f"c|{cid}"))
    rows.append(ctrl)

    return InlineKeyboardMarkup(rows)

# ===== –ó–∞–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ "go" =====
async def photo_quick_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    context.user_data.clear()
    context.user_data["cursor_path"] = ""
    root, _ = structure_load_index()

    if not STRUCT_INDEX:
        await query.edit_message_text("–ü–æ—Ö–æ–∂–µ, —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—É—Å—Ç–æ–π. –ó–∞–ø—É—Å—Ç–∏ /sync.")
        return

    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–µ–∫—Ç–∞ (–∫–æ—Ä–µ–Ω—å: {root}):")
    await query.message.reply_text(
        text="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:",
        reply_markup=_kb_for_parent("")
    )
    return PH1_WAIT_SECTION

# ===== /photo (–≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ reply-–∫–Ω–æ–ø–∫—É) =====
async def photo_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["cursor_path"] = ""
    root, _ = structure_load_index()

    if not STRUCT_INDEX:
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—É—Å—Ç–æ–π. –ù–∞–∂–º–∏ /sync, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
        return ConversationHandler.END

    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–µ–∫—Ç–∞ (–∫–æ—Ä–µ–Ω—å: {root}):",
        reply_markup=_kb_for_parent("")
    )
    return PH1_WAIT_SECTION

async def photo_pick_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫:
      p|<id>  -> —Å–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ –ø—É—Ç—å —Å —ç—Ç–∏–º id
      b|<id>  -> –ø–æ–¥–Ω—è—Ç—å—Å—è –∫ –ø—É—Ç–∏ —Å —ç—Ç–∏–º id
      c|<id>  -> –≤—ã–±—Ä–∞—Ç—å –ø—É—Ç—å —Å —ç—Ç–∏–º id –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —à–∞–≥—É ¬´—Ñ–æ—Ç–æ¬ª
    """
    query = update.callback_query
    await query.answer()

    data = (query.data or "").strip()
    act, _, pid = data.partition("|")
    path = _path_by_id(pid)

    # –ó–∞—â–∏—Ç–∏–º—Å—è –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback'–æ–≤
    if act in ("p", "b", "c") and path is None:
        await query.answer("–ú–µ–Ω—é —É—Å—Ç–∞—Ä–µ–ª–æ, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /photo", show_alert=True)
        return PH1_WAIT_SECTION

    if act == "p":
        context.user_data["cursor_path"] = path
        text = f"–†–∞–∑–¥–µ–ª: {format_path_for_notion(path) if path else '–ö–æ—Ä–µ–Ω—å'}\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:"
        await query.edit_message_text(text=text, reply_markup=_kb_for_parent(path))
        return PH1_WAIT_SECTION

    if act == "b":
        context.user_data["cursor_path"] = path
        text = f"–†–∞–∑–¥–µ–ª: {format_path_for_notion(path) if path else '–ö–æ—Ä–µ–Ω—å'}\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:"
        await query.edit_message_text(text=text, reply_markup=_kb_for_parent(path))
        return PH1_WAIT_SECTION

    if act == "c":
        if not path:
            await query.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–∑–¥–µ–ª.", show_alert=True)
            return PH1_WAIT_SECTION
        context.user_data["section_path"] = path
        nice = format_path_for_notion(path)
        await query.edit_message_text(
            f"‚úÖ –†–∞–∑–¥–µ–ª –≤—ã–±—Ä–∞–Ω:\n{nice}\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)."
        )
        return PH2_WAIT_PHOTO

    await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)
    return PH1_WAIT_SECTION

async def ph2_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return PH2_WAIT_PHOTO

    photo = update.message.photo[-1]
    file = await photo.get_file()
    bio = io.BytesIO()
    await file.download_to_memory(out=bio)
    bio.seek(0)

    context.user_data["photo_bytes"] = bio.read()
    await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ ¬´-¬ª:")
    return PH3_WAIT_COMMENT

async def ph3_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment_raw = (update.message.text or "").strip()
    comment = None if comment_raw in ("-", "‚Äî", "") else comment_raw

    section_path = context.user_data.get("section_path", "")
    photo_bytes  = context.user_data.get("photo_bytes")

    if not photo_bytes:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /photo")
        return ConversationHandler.END

    if not section_path:
        await update.message.reply_text("–†–∞–∑–¥–µ–ª –ø–æ—Ç–µ—Ä—è–Ω. –ü–æ–ø—Ä–æ–±—É–π /photo –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Cloudinary
    folder = f"{STRUCT_ROOT}/{section_path}" if STRUCT_ROOT else section_path
    leaf = section_path.split("/")[-1]
    public_id = f"{leaf}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    try:
        up = cloudinary.uploader.upload(
            photo_bytes,
            folder=folder,
            public_id=public_id,
            resource_type="image",
        )
        url = up["secure_url"]
    except Exception as e:
        await update.message.reply_text(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary: {e}")
        return ConversationHandler.END

    # –ó–∞–ø–∏—Å—å –≤ Notion
    section_for_notion = format_path_for_notion(section_path)
    ok, info = _notion_create_row(
        section=section_for_notion,
        file_name="–§–æ—Ç–æ —Å–æ —Å—Ç—Ä–æ–π–∫–∏",
        url=url,
        comment=comment,
    )
    if ok:
        await update.message.reply_text("‚úì –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Cloudinary –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Notion.")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–æ Notion –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {info}")

    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu())
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())
    return ConversationHandler.END

def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ—Ç TELEGRAM_BOT_TOKEN –≤ .env")
    if not NOTION_TOKEN or not DATABASE_ID:
        raise RuntimeError("–ù–µ—Ç NOTION_TOKEN_SCHOOL65 / NOTION_DATABASE_ID_SCHOOL65 –≤ .env")

    # –∑–∞–≥—Ä—É–∑–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    root, _ = structure_load_index()
    old_root, paths = root, []  # –¥–ª—è –ø–µ—á–∞—Ç–∏

    print("=======================================")
    print("INTELLECTUM ‚Äî Pocket Foreman (Cloudinary ‚Üí Notion)")
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ: –®–∫–æ–ª–∞ 65 ‚Äî –£—Ä–∞–ª—å—Å–∫")
    print(f"Notion –±–∞–∑–∞ ID: {DATABASE_ID[:8]}...{DATABASE_ID[-5:]}")
    print(f"Cloudinary: {cloudinary.config().cloud_name}")
    print(f"–ö–æ—Ä–µ–Ω—å Cloudinary: {root}")
    print("=======================================")

    # ---- –ê–≤—Ç–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ structure.txt ----
    # def _on_synced(_info: dict):
    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ç—É—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É
    #     pass

    # start_watcher(on_synced=_on_synced)
    # ------------------------------------------------------

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    admin_chat_id = int(os.getenv("ADMIN_CHAT_ID", "0"))

    # —Å–æ–∑–¥–∞—ë–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Safe-Sync —á–µ—Ä–µ–∑ JobQueue
    def _start_safe_sync_once(context):
        safe_sync = start_safe_sync(app, admin_chat_id=admin_chat_id)
        app.bot_data["safe_sync"] = safe_sync
        print("[SafeSync] ‚úÖ –ó–∞–ø—É—â–µ–Ω –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ structure.txt")

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–ø—É—Å–∫ SafeSync —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    app.job_queue.run_once(_start_safe_sync_once, 1.0)

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
    async def _on_safe_sync_callback(update, context):
        ss = context.application.bot_data.get("safe_sync")
        if ss:
            await ss.on_callback(update, context)

    app.add_handler(CallbackQueryHandler(
        _on_safe_sync_callback,
        pattern=r"^safesync:(apply|cancel)\|\d+$"
    ))

    # --- –∫–æ–Ω–µ—Ü SafeSync –≤—Å—Ç–∞–≤–∫–∏ ---


    # /photo –¥–∏–∞–ª–æ–≥
    # –ø–∞—Ç—Ç–µ—Ä–Ω –ª–æ–≤–∏—Ç –∏ "üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", –∏ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", –∏ "–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"
    ADD_PHOTO_PATTERN = r"(?i)(?:^|\s)–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ$"

    photo_conv = ConversationHandler(
        entry_points=[
            CommandHandler("photo", photo_start),
            MessageHandler(filters.Regex(ADD_PHOTO_PATTERN), photo_start),
        ],
        states={
            PH1_WAIT_SECTION: [CallbackQueryHandler(photo_pick_cb, pattern=r"^(p|b|c)\|")],
            PH2_WAIT_PHOTO:   [MessageHandler(filters.PHOTO, ph2_photo)],
            PH3_WAIT_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ph3_comment)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="photo_conv",
        persistent=False,
        # per_message=False  # –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
   )

    


    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("sync", cmd_sync))

    # –°–ù–ê–ß–ê–õ–ê –¥–∏–∞–ª–æ–≥ /photo –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "go"
    app.add_handler(photo_conv)
    app.add_handler(CallbackQueryHandler(photo_quick_start, pattern=r"^go$"))

    # –ü–û–¢–û–ú –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–º–µ–Ω—é)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ensure_menu))


    
    log.info("Pocket Foreman (Cloudinary -> Notion) is starting...")
    app.run_polling()

if __name__ == "__main__":
    main()
